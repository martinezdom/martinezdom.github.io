---
import SunIcon from "./icons/Sun.astro";
import MoonIcon from "./icons/Moon.astro";
import SystemIcon from "./icons/System.astro";
const { language } = Astro.props;

const THEMES = [
  { label: language.themes.light, value: 'light' },
  { label: language.themes.dark, value: 'dark' },
  { label: language.themes.system, value: 'system' }
];
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="flex items-center appearance-none border-none relative hover:scale-110 transition-transform"
  >
    <span class="sr-only">{language.themes.selectorText}</span>
    <SunIcon id="light" class="theme-toggle-icon w-5 h-5 transition-transform" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute w-5 h-5 transition-transform" />
    <SystemIcon id="system" class="theme-toggle-icon absolute w-5 h-5 transition-transform" />
  </button>

  <div
    id="themes-menu"
    class="absolute top-8 right-0 hidden scale-95 p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-md backdrop-blur-sm transition-transform duration-150 origin-top-right"
  >
    <ul>
      {THEMES.map((theme) => (
        <li
          class="themes-menu-option px-2 py-1.5 cursor-pointer rounded-sm hover:bg-gray-200/50 dark:hover:bg-gray-500/50"
          data-theme={theme.value}
        >
          {theme.label}
        </li>
      ))}
    </ul>
  </div>
</div>

<script is:inline>
const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
const btn = document.getElementById("theme-toggle-btn");
const menu = document.getElementById("themes-menu");

const getTheme = () => localStorage.getItem("theme") || "system";

const updateIcon = (theme) => {
  document.querySelectorAll(".theme-toggle-icon").forEach((el) => {
    el.style.transform = el.id === theme ? "scale(1)" : "scale(0)";
  });
};

const applyTheme = () => {
  const theme = getTheme();
  const isDark = theme === "dark" || (theme === "system" && matchMedia.matches);
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  updateIcon(theme);
};

applyTheme();

matchMedia.addEventListener("change", applyTheme);

btn.addEventListener("click", (e) => {
  e.stopPropagation();
  menu.classList.toggle("hidden");
  menu.classList.toggle("scale-100");
});

document.addEventListener("click", () => {
  menu.classList.add("hidden");
  menu.classList.remove("scale-100");
});

document.querySelectorAll(".themes-menu-option").forEach((el) => {
  el.addEventListener("click", (e) => {
    const theme = e.currentTarget.dataset.theme;
    localStorage.setItem("theme", theme);
    applyTheme();
  });
});

document.addEventListener("astro:after-swap", () => {
  applyTheme();
  window.scrollTo({ left: 0, top: 0, behavior: "instant" });
});
</script>
